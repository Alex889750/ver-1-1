import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Badge } from './ui/badge';
import { Checkbox } from './ui/checkbox';

const SettingsPanel = ({ 
  settings, 
  onSettingsChange, 
  isOpen, 
  onToggle,
  totalTickers = 0,
  activeTickers = 0,
  availableTimeframes = [],
  availableTableIntervals = []  // Add this new prop
}) => {
  const handleDisplayCountChange = (e) => {
    const value = Math.max(1, Math.min(30, parseInt(e.target.value) || 10));
    onSettingsChange({
      ...settings,
      displayCount: value
    });
  };

  const handleSearchChange = (e) => {
    onSettingsChange({
      ...settings,
      search: e.target.value
    });
  };

  const handleTimeframeToggle = (timeframe) => {
    const currentTimeframes = settings.chartTimeframes || ['30s', '1m', '5m'];
    let newTimeframes;
    
    if (currentTimeframes.includes(timeframe)) {
      // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 1
      newTimeframes = currentTimeframes.filter(tf => tf !== timeframe);
      if (newTimeframes.length === 0) {
        newTimeframes = [timeframe]; // –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3
      if (currentTimeframes.length < 3) {
        newTimeframes = [...currentTimeframes, timeframe];
      } else {
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        newTimeframes = [...currentTimeframes.slice(0, 2), timeframe];
      }
    }
    
    onSettingsChange({
      ...settings,
      chartTimeframes: newTimeframes
    });
  };

  const handleTableIntervalChange = (columnIndex, newInterval) => {
    const newIntervals = [...settings.tableIntervals];
    newIntervals[columnIndex] = newInterval;
    onSettingsChange({
      ...settings,
      tableIntervals: newIntervals
    });
  };

  const handleSignalThresholdChange = (e) => {
    const value = Math.max(0.01, Math.min(30, parseFloat(e.target.value) || 1.01));
    onSettingsChange({
      ...settings,
      signalThreshold: value
    });
  };

  const handleSignalCandlesCountChange = (e) => {
    const value = Math.max(3, Math.min(100, parseInt(e.target.value) || 10));
    onSettingsChange({
      ...settings,
      signalCandlesCount: value
    });
  };

  if (!isOpen) {
    return (
      <div className="fixed top-4 right-4 z-50">
        <Button 
          onClick={onToggle}
          className="bg-blue-600 hover:bg-blue-700 text-white shadow-lg"
        >
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed top-4 right-4 z-50 w-96">
      <Card className="bg-gray-800/95 border-gray-700 backdrop-blur-sm shadow-2xl max-h-screen overflow-y-auto">
        <CardHeader className="pb-3">
          <div className="flex justify-between items-center">
            <CardTitle className="text-white text-lg">‚öôÔ∏è TradingView –ù–∞—Å—Ç—Ä–æ–π–∫–∏</CardTitle>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={onToggle}
              className="text-gray-400 hover:text-white"
            >
              ‚úï
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-2 gap-2">
            <div className="bg-gray-700/50 rounded-lg p-2 text-center">
              <div className="text-xs text-gray-400">–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤</div>
              <div className="text-white font-bold">{totalTickers}</div>
            </div>
            <div className="bg-gray-700/50 rounded-lg p-2 text-center">
              <div className="text-xs text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
              <div className="text-green-400 font-bold">{activeTickers}</div>
            </div>
          </div>

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              –¢–∏–∫–µ—Ä–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ (1-30)
            </Label>
            <Input
              type="number"
              min="1"
              max="30"
              value={settings.displayCount}
              onChange={handleDisplayCountChange}
              className="bg-gray-700 border-gray-600 text-white"
              placeholder="10"
            />
            <div className="text-xs text-gray-500">
              –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {settings.displayCount}
            </div>
          </div>

          {/* –ü–æ–∏—Å–∫ */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
            </Label>
            <Input
              type="text"
              value={settings.search}
              onChange={handleSearchChange}
              className="bg-gray-700 border-gray-600 text-white"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH..."
            />
            {settings.search && (
              <div className="text-xs text-gray-500">
                –ü–æ–∏—Å–∫: "{settings.search}"
              </div>
            )}
          </div>

          {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            </Label>
            <div className="grid grid-cols-2 gap-2">
              <div>
                <select
                  value={settings.sortBy}
                  onChange={(e) => onSettingsChange({
                    ...settings,
                    sortBy: e.target.value
                  })}
                  className="w-full bg-gray-700 border border-gray-600 text-white text-sm rounded-md px-2 py-1"
                >
                  <option value="symbol">–°–∏–º–≤–æ–ª</option>
                  <option value="price">–¶–µ–Ω–∞</option>
                  <option value="change_15s">15 —Å–µ–∫—É–Ω–¥</option>
                  <option value="change_30s">30 —Å–µ–∫—É–Ω–¥</option>
                  <option value="changePercent24h">24—á %</option>
                  <option value="volume">–û–±—ä–µ–º</option>
                </select>
              </div>
              <div>
                <select
                  value={settings.sortOrder}
                  onChange={(e) => onSettingsChange({
                    ...settings,
                    sortOrder: e.target.value
                  })}
                  className="w-full bg-gray-700 border border-gray-600 text-white text-sm rounded-md px-2 py-1"
                >
                  <option value="asc">‚Üë –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                  <option value="desc">‚Üì –ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                </select>
              </div>
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              üîß –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            </Label>
            <div className="space-y-2">
              {settings.tableIntervals?.map((interval, index) => (
                <div key={`interval-${index}`} className="flex items-center space-x-2">
                  <span className="text-gray-400 text-xs w-12">
                    –ö–æ–ª. {index + 1}:
                  </span>
                  <select
                    value={interval}
                    onChange={(e) => handleTableIntervalChange(index, e.target.value)}
                    className="flex-1 bg-gray-700 border border-gray-600 text-white text-xs rounded-md px-2 py-1"
                  >
                    {availableTableIntervals.map((intervalOption) => (
                      <option key={intervalOption.value} value={intervalOption.value}>
                        {intervalOption.label}
                      </option>
                    ))}
                  </select>
                </div>
              ))}
            </div>
            <div className="text-xs text-gray-500">
              –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: {settings.tableIntervals?.join(', ') || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              üìä –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤—ã–±–µ—Ä–∏—Ç–µ 1-3)
            </Label>
            <div className="grid grid-cols-2 gap-2">
              {availableTimeframes.map((tf) => (
                <div key={tf.value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`tf-${tf.value}`}
                    checked={settings.chartTimeframes?.includes(tf.value) || false}
                    onCheckedChange={() => handleTimeframeToggle(tf.value)}
                    className="border-gray-600"
                  />
                  <label 
                    htmlFor={`tf-${tf.value}`}
                    className="text-sm text-gray-300 cursor-pointer flex items-center space-x-1"
                  >
                    <div 
                      className="w-2 h-2 rounded-full"
                      style={{ backgroundColor: tf.color }}
                    ></div>
                    <span>{tf.label}</span>
                  </label>
                </div>
              ))}
            </div>
            <div className="text-xs text-gray-500">
              –í—ã–±—Ä–∞–Ω–æ: {settings.chartTimeframes?.length || 0}/3 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="space-y-2">
            <Label className="text-gray-300 text-sm font-medium">
              –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            </Label>
            <div className="flex flex-wrap gap-2">
              <Button
                size="sm"
                variant={settings.sortBy === 'change_15s' && settings.sortOrder === 'desc' ? 'default' : 'outline'}
                onClick={() => onSettingsChange({
                  ...settings,
                  sortBy: 'change_15s',
                  sortOrder: 'desc'
                })}
                className="text-xs"
              >
                ‚ö° 15—Å —Ä–æ—Å—Ç
              </Button>
              <Button
                size="sm"
                variant={settings.sortBy === 'change_30s' && settings.sortOrder === 'desc' ? 'default' : 'outline'}
                onClick={() => onSettingsChange({
                  ...settings,
                  sortBy: 'change_30s',
                  sortOrder: 'desc'
                })}
                className="text-xs"
              >
                üî• 30—Å —Ä–æ—Å—Ç
              </Button>
              <Button
                size="sm"
                variant={settings.sortBy === 'changePercent24h' && settings.sortOrder === 'desc' ? 'default' : 'outline'}
                onClick={() => onSettingsChange({
                  ...settings,
                  sortBy: 'changePercent24h',
                  sortOrder: 'desc'
                })}
                className="text-xs"
              >
                üöÄ –¢–æ–ø —Ä–æ—Å—Ç
              </Button>
              <Button
                size="sm"
                variant={settings.sortBy === 'changePercent24h' && settings.sortOrder === 'asc' ? 'destructive' : 'outline'}
                onClick={() => onSettingsChange({
                  ...settings,
                  sortBy: 'changePercent24h',
                  sortOrder: 'asc'
                })}
                className="text-xs"
              >
                üìâ –¢–æ–ø –ø–∞–¥–µ–Ω–∏–µ
              </Button>
              <Button
                size="sm"
                variant={settings.sortBy === 'volume' && settings.sortOrder === 'desc' ? 'default' : 'outline'}
                onClick={() => onSettingsChange({
                  ...settings,
                  sortBy: 'volume',
                  sortOrder: 'desc'
                })}
                className="text-xs"
              >
                üìä –û–±—ä–µ–º
              </Button>
            </div>
          </div>

          {/* –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
          <div className="flex items-center justify-between bg-gray-700/50 rounded-lg p-2">
            <span className="text-gray-300 text-sm">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</span>
            <Badge variant="default" className="bg-green-600">
              –í–∫–ª—é—á–µ–Ω–æ (3—Å)
            </Badge>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="text-xs text-gray-500 text-center pt-2 border-t border-gray-700">
            TradingView Pro ‚Ä¢ MEXC API ‚Ä¢ 8 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ‚Ä¢ v3.0
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SettingsPanel;